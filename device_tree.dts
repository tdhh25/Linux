//这是一个注释
/*这是一个注释*/

/*
 * 预编译命令
 * 使用cpp工具将xxxx.dts文件中的头文件展开，生成一个临时文件xxxx.dtb.dts.tmp
 * cpp -nostdinc -I[dir_with_dts_includes] -x assembler-with-cpp [src_dts_file] > [tmp_dts_file]
 * -nostdinc：                  不使用标准的系统头文件目录，避免不必要的报错。
 * -I[dir_with_dts_includes]：  这里是头文件的目录，如果就是在当前目录就用-I.
 * [src_dts_file]：             是你的源设备树文件（.dts）
 * [tmp_dts_file]：             是预处理后的输出文件，为了和瑞芯微保持统一我们到时候命名后最写成 xxxxxxxxxxxx.dtb.dts.tmp
 */

/*
 * 设备树命名规则
 * 1、命名通俗易懂，比如serial(串口)，usb(usb控制器)，i2c(i2c控制器及设备)
 * 2、小写字母，下划线
 * 3、唯一性 
 */

// 节点
// 标签: 节点名[@单元地址] { 标签: 和 @单元地址不是必须的
//     子节点名1 {
// 
//     };
//     子节点名2 {
// 
//     };
// };

// 特殊节点
// aliases {
//     [别名] = [标签]
//     [别名] = [节点路径]
// }

/dts-v1/;
///include/ "xxx.dtsi"    //标准的设备树包含语法
//#include "xxx.h"        //c语言头文件包含语法，因为不是标准的设备树语法，所以需要预编译, 预编译看上面的预编译命令

/ {//这是根节点
    node: node1 {
        node1@0x01 {
            // 这里加上单元地址就要加上reg属性，不然会有警告Warning (unit_address_vs_reg): Node /node1/node1_child1@0x01 has a unit name, but no reg property
            // 这个单元地址还有规避重复命名的作用
        };
        node1 {
        };
    };
    node2 {
        node1 {
            // 同一层级外，节点命名是可以相同的，类似于文件？
        };
    };
};//根节点定义结束

/dts-v1/;

// 通过标签的方式追加后反编译出来的结果
// /dts-v1/;
// / {
//
//         node1 {
// 
//                 node1@0x01 {
//                 };
// 
//                 node1 {
//                 };
// 
//                 node_add {
//                 };
//         };
// 
//         node2 {
// 
//                 node1 {
//                 };
//         };
// };

&node { //通过标签的方式往node1追加node_add
    node_add {

    };
};




